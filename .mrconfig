[DEFAULT]
git_update = 
	if test -n "$UPDATE_JUNK_DRAWER"; then
		export GIT_PAGER=cat # easier than applying --no-pager to all following git commands
		git pull-shallow || git pull
	else
		echo "Junk Drawer: Skipping junk drawer project."
	fi

# NB: taken directly from mr itself. Modified to add `--depth 1`
# TODO: does --no-tags make sense?
# TODO: can I use mr's git_register_append instead? It would make this a little cleaner
git_register = 
	branch="$(LC_ALL=C git rev-parse --abbrev-ref HEAD 2> /dev/null | grep -v '^HEAD$')" || branch=master
	remote="$(LC_ALL=C git config --get branch.$branch.remote 2> /dev/null)" || remote=origin
	url="`LC_ALL=C git config --get "remote.$remote.url"`" || true
	if [ -z "$url" ]; then
		error "cannot determine git url"
	fi
	echo "Registering git url: $url in $MR_CONFIG"
	mr -c "$MR_CONFIG" config "`pwd`" checkout="git clone --depth 1 '$url' '$MR_REPO'"

# NB: use this vim command to add depth 1:
# (We use the \zs and \ze lookaround to prevent having to duplicate the matched text in the replacement)
# https://vim.fandom.com/wiki/Regex_lookahead_and_lookbehind
# :%s/git clone\zs\ze '/ --depth 1/g

[git]
checkout = git clone --depth 1 'git@github.com:git/git.git' 'git'

[spring-framework]
checkout = git clone --depth 1 'git@github.com:spring-projects/spring-framework.git' 'spring-framework'

[devhome]
checkout = git clone --depth 1 'git@github.com:microsoft/devhome.git' 'devhome'

[TIL-secretgeek]
checkout = git clone --depth 1 'git@github.com:secretGeek/today-i-learned-staging.git' 'TIL-secretgeek'

[baeldung-tutorials]
checkout = git clone --depth 1 'git@github.com:eugenp/tutorials.git' 'baeldung-tutorials'

# NB: only the members of this group have ssh access. See https://savannah.gnu.org/git/?group=bash
[bash]
checkout = git clone --depth 1 'https://git.savannah.gnu.org/git/bash.git' 'bash'

[bat]
checkout = git clone --depth 1 'git@github.com:sharkdp/bat.git' 'bat'

[bitbucket-cli]
checkout = git clone --depth 1 'git@github.com:swisscom/bitbucket-cli.git' 'bitbucket-cli'

[content_inspector]
checkout = git clone --depth 1 'git@github.com:sharkdp/content_inspector.git' 'content_inspector'

[extras-for-bat]
checkout = git clone --depth 1 'git@github.com:eth-p/bat-extras.git' 'extras-for-bat'

[fzf]
checkout = git clone --depth 1 'git@github.com:junegunn/fzf.git' 'fzf'

[git-extras]
checkout = git clone --depth 1 'git@github.com:jakebman/git-extras.git' 'git-extras'

[git-vendor]
checkout = git clone --depth 1 'git@github.com:Tyrben/git-vendor.git' 'git-vendor'

[grace-framework]
checkout = git clone --depth 1 'git@github.com:graceframework/grace-framework.git' 'grace-framework'

[libgit2]
checkout = git clone --depth 1 'git@github.com:libgit2/libgit2.git' 'libgit2'

# NB: only members of the debian team can register ssh keys for this project: https://salsa.debian.org/debian/mailcap
# "Debian Salsa can only be used within its organization"
[mailcap]
checkout = git clone --depth 1 'https://salsa.debian.org/debian/mailcap.git' 'mailcap'

[maven]
checkout = git clone --depth 1 'git@github.com:apache/maven.git' 'maven'

[hooks-pre-commit]
# I call this "jungle tech" because I first used it for aws-jungle
# renamed from [pre-commit-hooks]. Current checkout plan tries to get my work env to save a git clone.
# TODO: remove this shim some time later.
checkout = mv pre-commit-hooks hooks-pre-commit || git clone --depth 1 'git@github.com:jumanjihouse/pre-commit-hooks.git' 'hooks-pre-commit'

[procps]
checkout = git clone --depth 1 'git@gitlab.com:procps-ng/procps.git' 'procps'

[sdkman-website]
checkout = git clone --depth 1 'git@github.com:sdkman/sdkman-website.git' 'sdkman-website'

[terminal]
checkout = git clone --depth 1 'git@github.com:microsoft/terminal.git' 'terminal'

[AntennaPod]
checkout = git clone --depth 1 'git@github.com:AntennaPod/AntennaPod.git' 'AntennaPod'

[pygments]
checkout = git clone --depth 1 'git@github.com:pygments/pygments.git' 'pygments'

[hibernate-validator]
checkout = git clone --depth 1 'git@github.com:hibernate/hibernate-validator.git' 'hibernate-validator'

[protobuf-google]
checkout = git clone --depth 1 'git@github.com:protocolbuffers/protobuf.git' 'protobuf-google'

[spring-initializr]
checkout = git clone --depth 1 'git@github.com:spring-io/initializr.git' 'spring-initializr'

[wsl-docs]
checkout = git clone --depth 1 'git@github.com:MicrosoftDocs/WSL.git' 'wsl-docs'

[wsl]
checkout = git clone --depth 1 'git@github.com:microsoft/WSL.git' 'wsl'

[multigit]
checkout = git clone --depth 1 'git@github.com:capr/multigit.git' 'multigit'

[super-productivity]
checkout = git clone --depth 1 'git@github.com:johannesjo/super-productivity.git' 'super-productivity'

[git-branchless]
checkout = git clone --depth 1 'git@github.com:arxanas/git-branchless.git' 'git-branchless'

[nppPluginList]
checkout = git clone --depth 1 'git@github.com:notepad-plus-plus/nppPluginList.git' 'nppPluginList'

[googleapis]
checkout = git clone --depth 1 'git@github.com:googleapis/googleapis.git' 'googleapis'

[google-api-python-client]
# This repo has two *large* folders that I don't care to keep on disk.
checkout = 
	git clone --depth 1 --sparse 'git@github.com:googleapis/google-api-python-client.git' 'google-api-python-client'
	cd 'google-api-python-client'
	# NB: the no-cone sparse checkout is deprecated. Unfortunately, I really want the "exclude just this one thing"
	# behavior that is only available in non-cone land. Cone-land only lets you *include* ("include me, my siblings, and my children"), not *exclude*
	git sparse-checkout init --no-cone
	# clear out `clone --sparse`'s `!/*/` no-nested directories pattern.
	# This is not strictly necessary (because we re-add `/*`), but it keeps everything clean.
	cp /dev/null .git/info/sparse-checkout
	git sparse-checkout add '/*' '!/docs/dyn' '!/googleapiclient/discovery_cache/documents'

[vcsh]
checkout = git clone --depth 1 'git@github.com:jakebman/vcsh.git' 'vcsh'

[wslkit]
checkout = git clone --depth 1 'git@github.com:albertony/wslkit.git' 'wslkit'

[session-manager-plugin-aws-cli]
checkout =  # see google-api-python-client for sparse checkout info
	git clone --depth 1 --sparse 'git@github.com:aws/session-manager-plugin.git' 'session-manager-plugin-aws-cli'
	cd 'session-manager-plugin-aws-cli'
	git sparse-checkout init --no-cone
	# clear out `clone --sparse`'s `!/*/` no-nested directories pattern.
	# This is not strictly necessary (because we re-add `/*`), but it keeps everything clean.
	cp /dev/null .git/info/sparse-checkout
	git sparse-checkout add '/*' '!/vendor/src/github.com/aws'

[aws-jungle]
checkout = git clone --depth 1 'git@github.com:achiku/jungle.git' 'aws-jungle'

[aws-sso-util]
checkout = git clone --depth 1 'git@github.com:benkehoe/aws-sso-util.git' 'aws-sso-util'

[ssh-over-ssm]
checkout = git clone --depth 1 'git@github.com:elpy1/ssh-over-ssm.git' 'ssh-over-ssm'

[txtai]
checkout = git clone --depth 1 'git@github.com:neuml/txtai.git' 'txtai'

[asdf]
checkout = git clone --depth 1 'git@github.com:asdf-vm/asdf.git' 'asdf'

[awesome-compose]
checkout = git clone --depth 1 'git@github.com:docker/awesome-compose.git' 'awesome-compose'

[cpython]
checkout = git clone --depth 1 'git@github.com:python/cpython.git' 'cpython'

[pyenv-installer]
checkout = git clone --depth 1 'git@github.com:pyenv/pyenv-installer.git' 'pyenv-installer'

[Minikube-and-LetsEncrypt]
checkout = git clone --depth 1 'git@github.com:klaushofrichter/Minikube-and-LetsEncrypt.git' 'Minikube-and-LetsEncrypt'

[node]
checkout = git clone --depth 1 'https://github.com/nodejs/node.git' 'node'

[ggshield]
checkout = git clone --depth 1 'git@github.com:GitGuardian/ggshield.git' 'ggshield'

[JsonPath]
checkout = git clone --depth 1 'git@github.com:json-path/JsonPath.git' 'JsonPath'
